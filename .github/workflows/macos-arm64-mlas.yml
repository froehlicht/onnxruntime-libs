name: macos-arm64-mlas

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 1.17.3)"
        required: true
        default: "1.17.3"

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION: ${{ github.event.inputs.version || '1.17.3' }}

jobs:
  macos_arm64:
    name: Build onnxruntime with CoreML + MLAS for macOS arm64
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v4
        with:
          path: onnxruntime-osx-arm64-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-osx-arm64-coreml-mlas-${{ env.ONNXRUNTIME_VERSION }}-cache-v2

      - name: ccache
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: macos-arm64-mlas

      - name: Update ONNX Runtime
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        run: |
          echo $ONNXRUNTIME_VERSION > ONNXRUNTIME_VERSION
          git submodule update --init --depth=1 onnxruntime
          cd onnxruntime
          git fetch origin tag v$ONNXRUNTIME_VERSION
          git checkout v$ONNXRUNTIME_VERSION

      - name: Download protoc
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-osx-x86_64.zip
            unzip protoc-3.20.3-osx-x86_64.zip
          elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.1[56789].[0-9] || ${{ env.ONNXRUNTIME_VERSION }} =~ 1.2[0-9].[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-aarch_64.zip
            unzip protoc-21.12-osx-aarch_64.zip
          else
            echo "Unsupported version ${{ env.ONNXRUNTIME_VERSION }}"
            exit 1
          fi
          ./bin/protoc --version

      - name: Set environment variable
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> "$GITHUB_PATH"

      - name: Display protoc info
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          protoc --version

      - name: Install dependencies
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cmake --version

      - name: Build onnxruntime for macOS arm64 with CoreML + MLAS
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export CMAKE_CXX_COMPILER_LAUNCHER=ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          echo "=== Building ONNX Runtime v${{ env.ONNXRUNTIME_VERSION }} ==="
          echo "Features: CoreML + MLAS"
          
          # 🔥 CoreML + MLAS flags
          export CMAKE_OPTIONS="-Donnxruntime_USE_COREML=ON \
            -DCMAKE_OSX_ARCHITECTURES='arm64' \
            -Donnxruntime_USE_MLAS=ON \
            -Donnxruntime_MLAS_MULTI_ARCH=ON \
            --compile-no-warning-as-error \
            -Donnxruntime_BUILD_UNIT_TESTS=OFF \
            -DONNX_CUSTOM_PROTOC_EXECUTABLE=$GITHUB_WORKSPACE/bin/protoc"
          
          echo "CMake Options: $CMAKE_OPTIONS"
          ./build-static_lib.sh

      - name: Verify build output
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "=== Build Output ==="
          ls -lh output/static_lib/
          ls -lh output/static_lib/include
          ls -lh output/static_lib/lib
          
          echo -e "\n=== Verifying MLAS ==="
          STATIC_LIB="output/static_lib/lib/libonnxruntime_static.a"
          
          if [ -f "$STATIC_LIB" ]; then
            # MLAS symbols check
            echo "Checking for MLAS symbols..."
            MLAS_COUNT=$(nm "$STATIC_LIB" 2>/dev/null | grep -i mlas | wc -l)
            echo "MLAS symbols found: $MLAS_COUNT"
            
            if [ "$MLAS_COUNT" -gt 0 ]; then
              echo "✅ MLAS is included!"
              nm "$STATIC_LIB" | grep -i mlas | head -20
            else
              echo "⚠️  MLAS symbols not found - may still be linked"
            fi
            
            # CoreML symbols check
            echo -e "\nChecking for CoreML symbols..."
            COREML_COUNT=$(nm "$STATIC_LIB" 2>/dev/null | grep -i coreml | wc -l)
            echo "CoreML symbols found: $COREML_COUNT"
            
            if [ "$COREML_COUNT" -gt 0 ]; then
              echo "✅ CoreML is included!"
              nm "$STATIC_LIB" | grep -i coreml | head -10
            else
              echo "⚠️  CoreML symbols not found"
            fi
            
            # Architecture
            echo -e "\n=== Architecture ==="
            lipo -info "$STATIC_LIB" 2>/dev/null || file "$STATIC_LIB"
            
            # Size
            echo -e "\n=== Library Size ==="
            ls -lh "$STATIC_LIB"
          else
            echo "❌ Static library not found!"
            exit 1
          fi

      - name: Collect result
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # Copy CoreML header
          cp -v onnxruntime/include/onnxruntime/core/providers/coreml/coreml_provider_factory.h \
                output/static_lib/include/
          
          # Create package
          dst=onnxruntime-osx-arm64-coreml-mlas-${ONNXRUNTIME_VERSION}
          mkdir $dst
          mv -v output/static_lib/* $dst
          
          # Add build info
          cat > $dst/BUILD_INFO.txt <<EOF
          ONNX Runtime Build Information
          ==============================
          Version: ${ONNXRUNTIME_VERSION}
          Architecture: arm64 (Apple Silicon)
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Features:
          - CoreML ExecutionProvider ✅
          - MLAS (ARM64 NEON optimizations) ✅
          - CPU ExecutionProvider (fallback)
          
          Integration:
          1. Copy include/ and lib/ to your project
          2. Link: libonnxruntime_static.a
          3. Frameworks: -framework CoreML -framework Accelerate
          
          CMake Example:
            set(ONNXRUNTIME_LIBS "\${CMAKE_SOURCE_DIR}/libs/onnxruntime/lib/libonnxruntime_static.a")
            find_library(COREML_LIBRARY CoreML REQUIRED)
            find_library(ACCELERATE_LIBRARY Accelerate REQUIRED)
            target_link_libraries(YourTarget PRIVATE 
              \${ONNXRUNTIME_LIBS} 
              \${COREML_LIBRARY} 
              \${ACCELERATE_LIBRARY})
          EOF
          
          # Create archive
          zip -r ${dst}.zip $dst/
          
          echo "=== Package created ==="
          ls -lh ${dst}.zip
          
          # SHA256
          shasum -a 256 ${dst}.zip > ${dst}.zip.sha256
          cat ${dst}.zip.sha256

      - name: Upload artifact
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: onnxruntime-osx-arm64-coreml-mlas-${{ env.ONNXRUNTIME_VERSION }}
          path: |
            onnxruntime-osx-arm64-coreml-mlas-*.zip
            onnxruntime-osx-arm64-coreml-mlas-*.zip.sha256
          retention-days: 90
